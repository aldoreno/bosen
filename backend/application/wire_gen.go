// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package application

import (
	"bosen/log"
	"github.com/google/wire"
	"github.com/kelseyhightower/envconfig"
)

// Injectors from wire.go:

func injectConfig() (Config, error) {
	config, err := provideConfig()
	if err != nil {
		return Config{}, err
	}
	return config, nil
}

func injectDbConfig() (DbConfig, error) {
	config, err := injectConfig()
	if err != nil {
		return DbConfig{}, err
	}
	dbConfig := config.Database
	return dbConfig, nil
}

func NewApplication() (*Application, error) {
	config, err := injectConfig()
	if err != nil {
		return nil, err
	}
	application := &Application{
		config: config,
	}
	return application, nil
}

// wire.go:

var cfg *Config

func populateConfigFromEnv() (*Config, error) {
	if cfg != nil {
		return cfg, nil
	}

	err := envconfig.Process("backend", cfg)
	if err != nil {
		log.Fatal(err)
		return nil, err
	}
	log.Infof("%+v", cfg)
	return cfg, nil
}

func provideConfig() (Config, error) {
	cfg2, err := populateConfigFromEnv()
	return *cfg2, err
}

var applicationProvider = wire.NewSet(
	injectConfig, wire.Struct(new(Application), "config"),
)
